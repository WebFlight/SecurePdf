// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package securepdf.actions;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.ByteArrayOutputStream;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class Encrypt extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String password;
	private IMendixObject __pdfDocument;
	private system.proxies.FileDocument pdfDocument;

	public Encrypt(IContext context, java.lang.String password, IMendixObject pdfDocument)
	{
		super(context);
		this.password = password;
		this.__pdfDocument = pdfDocument;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.pdfDocument = this.__pdfDocument == null ? null : system.proxies.FileDocument.initialize(getContext(), __pdfDocument);

		// BEGIN USER CODE
		
		ILogNode logger = Core.getLogger("SecurePdf");
		logger.debug("Open PDF file");
		
		try(PDDocument doc = PDDocument.load(Core.getFileDocumentContent(getContext(), pdfDocument.getMendixObject()))){
			// Encryption key length
			
			int keyLength = 256;
			AccessPermission ap = new AccessPermission();

			// Optional access rules can be set using AccessRule..... Such as setCanPrint or setCanModify(true)

			// Owner password = password  (the input string)
			// User password can be set to limit access rules, see comment above. Set to password in this case.
			
			StandardProtectionPolicy spp = new StandardProtectionPolicy(password, password, ap);
			spp.setEncryptionKeyLength(keyLength);
			spp.setPermissions(ap);
			doc.protect(spp);
			
			try(ByteArrayOutputStream output = new ByteArrayOutputStream()){
				doc.save(output);
			
				try(InputStream NewFile = new ByteArrayInputStream(output.toByteArray())){
					logger.trace("Saving protected file");
					// Stores the newly protected file back in the original file
					Core.storeFileDocumentContent(getContext(), pdfDocument.getMendixObject(), NewFile);
					logger.trace("Saved protected file");
				}
				
			}
		}

		logger.debug("Finished");
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Encrypt";
	}

	// BEGIN EXTRA CODE
	
	// END EXTRA CODE
}
